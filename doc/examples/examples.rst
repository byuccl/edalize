Usage Examples
==============

Below you'll find example scripts that represent typical use cases for each tool or flow. 

Flows
-----

f4pga
~~~~~

The following F4PGA examples are for Xilinx 7-series boards, which F4PGA/Edalize is currently in development for.

A minimal F4PGA Edalize flow looks like this:

.. code-block:: python

    from edalize import *
    import os

    # This is the folder where the generated files will be put
    # and where the Makefile will be run from
    work_root = 'build'

    # This is how you define all of your input files (as an array of dictionaries)
    files = [
        # The use of relpath makes it easier for the makefile in the work root/build folder to target files outside it
        {'name' : os.path.relpath('example.v', work_root), 'file_type' : 'verilogSource'},
        {'name' : os.path.relpath('example.xdc', work_root), 'file_type' : 'xdc'}
    ]

    # Define the name of the tool/flow here (matches the name of the class)
    tool = 'f4pga'

    # The 'edam', or EDA Metadata, contains all of the configuration needed
    edam = {
        'files'         : files,
        'name'          : 'example_project_name',
        'parameters'    : {},       # <- Put parameters in a dictionary
        'toplevel'      : 'example_top_module',
        'tool_options'  : {
            'f4pga'     : {
                'arch'  : 'xilinx',
                'device_type'   : 'artix7',
                'device_name'   : 'xc7a50t_test',
                'part'  : 'xc7a35tcpg236-1'
            }
        }
    }
    
    # This is where you actually get an instance of the tool/flow class that has the configuration
    backend = get_edatool(tool)(edam=edam, work_root=work_root)
    
    # More complex projects may have more nuanced file/folder creation
    os.makedirs(work_root)
    
    # Step 1 of Edalize (Configure)
    backend.configure()
    
    # Step 2 of Edalize (Build)
    backend.build()
    
    # Step 3 of Edalize (Run)
    backend.run()

Any of the three steps can be ommitted as needed, but keep in mind that without the configure step the Makefile cannot be created/recreated. The build step is equivalent to calling ``make`` in the work root/build directory, and the run step is equivalent to calling ``make run`` ibid.

VPR
^^^

By default, VPR is chosen as the place and route tool. However, it can be explicitly specified in the tool options:

.. code-block:: python

	'tool_options'  : {
		'f4pga'     : {
			'arch'  : 'xilinx',
			'device_type'   : 'artix7',
			'device_name'   : 'xc7a50t_test',
			'part'  : 'xc7a35tcpg236-1',
			'pnr'	: 'vpr'     # <- can be specified as 'vpr' or 'vtr', they both point to the same tool
		}
	}

NextPNR
^^^^^^^

Currently the only other place and route tool that is supported is NextPNR. Specifically, the `Xilinx development branch`__. Some things to note are:

- NextPNR uses its own architecture file, ending in ``.bba`` or ``.bin.`` These can be generated by NextPNR using Project Xray.

- Vivado and VPR allow constraints files with semicolons at the end of statements, and curly braces surrounding the IO port names. NextPNR doesn't seem to like this, so remove those characters from your constraints file and it should work correctly.

An example of a NextPNR flow could look like this:

.. code-block:: python

    from edalize import *
    import os

    work_root = 'build'
    files = [
        {'name' : os.path.relpath('example.v', work_root),      'file_type' : 'verilogSource'},
        {'name' : os.path.relpath('example.xdc', work_root),    'file_type' : 'xdc'},
        {'name' : os.path.relpath('board.bin', work_root),      'file_type' : 'bin'}    # <- nextpnr-xilinx seems to prefer .bin files to .bba, see NextPNR documentation about creating these
    ]
    tool = 'f4pga'
    edam = {
        'files'         : files,
        'name'          : 'example_project_name',
        'parameters'    : {},       
        'toplevel'      : 'example_top_module',
        'tool_options'  : {
            'f4pga'     	: {
                'arch'  		: 'xilinx',
                'device_type'   : 'artix7',
                'device_name'   : 'xc7a50t_test',
                'part'  		: 'xc7a35tcpg236-1',
                'pnr'			: 'nextpnr' # <- Specify NextPNR here like this
            }
        }
    }
    backend = get_edatool(tool)(edam=edam, work_root=work_root)
    os.makedirs(work_root)
    backend.configure()
    backend.build()
    backend.run()

.. _NextPNR: https://github.com/gatecat/nextpnr-xilinx

__ NextPNR_