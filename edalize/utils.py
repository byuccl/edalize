class EdaCommands(object):
    class Command(object):
        def __init__(self, command, targets, depends, order_only_deps=[]):
            self.command = command
            self.targets = targets
            self.depends = depends
            self.order_only_deps = order_only_deps

    def __init__(self):
        self.commands = []
        self.vars = []
        self.make_vars = []
        self.header = "#Auto generated by Edalize\n\n"

    def add(self, command, targets, depends, order_only_deps=[]):
        self.commands.append(self.Command(command, targets, depends, order_only_deps))

    def add_var(self, var):
        self.vars.append(var)

    def set_default_target(self, target):
        self.default_target = target

    def write(self, outfile):
        with open(outfile, "w") as f:
            f.write(self.header)

            for v in self.make_vars:
                f.write(v + "\n")
            if self.make_vars:
                f.write("\n")
            for v in self.vars:
                f.write(v + "\n")
            if self.vars:
                f.write("\n")
            
            if not self.default_target:
                raise RuntimeError("Internal Edalize error. Missing default target")

            f.write(f"all: {self.default_target}\n")

            for c in self.commands:
                f.write(f"\n{' '.join(c.targets)}:")
                for d in c.depends:
                    f.write(" " + d)
                if c.order_only_deps:
                    f.write(" |")
                    for d in c.order_only_deps:
                        f.write(" " + d)

                f.write("\n")

                if c.command:
                    f.write(f"\t$(EDALIZE_LAUNCHER) {' '.join(c.command)}\n")

    def add_env_var(self, name, value):
        """Adds an environmental variable to the Makefile

        Args:
            name: The variable name
            value: The value to set the variable to
        """
        self.vars.append('export {name}={value}'.format(name=name, value=value))

    def add_make_var(self, name, value):
        """Adds a regular make variable to the Makefile

        Args:
            name: The variable name
            value: THe value to set the variable to
        """
        self.make_vars.append('{name}={value}'.format(name=name, value=value))

    def get_make_var(self, name):
        """Returns a make variable token string with the given name
        
        Args:
            name: The variable name

        Returns:
            str: The make variable token, usable in the file
        """
        return '$({name})'.format(name=name)